0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.21
3 info using node@v0.10.13
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/Daryl/.npm/3a52ce78-.lock
10 verbose tar pack [ '/Users/Daryl/.npm/haypeaeye/0.3.0/package.tgz', '.' ]
11 verbose tarball /Users/Daryl/.npm/haypeaeye/0.3.0/package.tgz
12 verbose folder .
13 info prepublish haypeaeye@0.3.0
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/Daryl/.npm/1f1177db-tar.lock
16 silly lockFile 41c0764e--npm-haypeaeye-0-3-0-package-tgz tar:///Users/Daryl/.npm/haypeaeye/0.3.0/package.tgz
17 verbose lock tar:///Users/Daryl/.npm/haypeaeye/0.3.0/package.tgz /Users/Daryl/.npm/41c0764e--npm-haypeaeye-0-3-0-package-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 41c0764e--npm-haypeaeye-0-3-0-package-tgz tar:///Users/Daryl/.npm/haypeaeye/0.3.0/package.tgz
21 silly lockFile 41c0764e--npm-haypeaeye-0-3-0-package-tgz tar:///Users/Daryl/.npm/haypeaeye/0.3.0/package.tgz
22 silly lockFile 96f3fd88-aryl-npm-haypeaeye-0-3-0-package /Users/Daryl/.npm/haypeaeye/0.3.0/package
23 verbose lock /Users/Daryl/.npm/haypeaeye/0.3.0/package /Users/Daryl/.npm/96f3fd88-aryl-npm-haypeaeye-0-3-0-package.lock
24 silly lockFile 96f3fd88-aryl-npm-haypeaeye-0-3-0-package /Users/Daryl/.npm/haypeaeye/0.3.0/package
25 silly lockFile 96f3fd88-aryl-npm-haypeaeye-0-3-0-package /Users/Daryl/.npm/haypeaeye/0.3.0/package
26 silly lockFile 3a52ce78- .
27 silly lockFile 3a52ce78- .
28 silly publish { name: 'haypeaeye',
28 silly publish   version: '0.3.0',
28 silly publish   description: 'Library for Express that lets you easily create APIs that self document and validate',
28 silly publish   main: 'haypeaeye.js',
28 silly publish   repository:
28 silly publish    { type: 'git',
28 silly publish      url: 'git://github.com/darylrowland/haypeaeye.git' },
28 silly publish   keywords: [ 'api', 'express', 'docs' ],
28 silly publish   author: { name: 'Daryl Rowland', email: 'daryl@cloudyclear.com' },
28 silly publish   license: 'MIT',
28 silly publish   dependencies: { moment: '*' },
28 silly publish   readme: 'haypeaeye\n=========\n\nNodeJS Express API Library for creating APIs that self document and validate. The motivation behind haypeaeye was that I hated the idea of writing + commenting an API library in code and then having to write up the API again in a completely different place. This ultimately leads to inconsistencies between your code and your documentation... haypeaeye fixes this.\n\nNote: this is just the beginnings of the documentation, more will be added soon.\n\nhaypeaeye works alongside Express, and provides:\n* a way to easily define API endpoints WITH documentation\n* additional validation of parameters (e.g. of the parameter types you are passing into your API method)\n* an auto-generated documentation site with a console to try things out\n* a way to hook in to your existing authentication methods (for api methods that need to be protected)\n* utility methods for returning success or error statuses + data easily\n* NEW utility method for returning a video stream (to be displayed in a HTML5 video tag)\n\n\n### Getting Started\nIn your app.js: `var haypeaeye = require(\'haypeaeye\')`\n\nThen add the following code snippet to set some initial settings:\n\n```\n// Haypeaeye Setup\nhaypeaeye.setSettings({\n    authenticatorMethod: function(req, callback) {\n        // Set this method to return if you want to provide a way of authenticating some API calls\n        // The callback should return callback(user)\n        // If there is no authorised user, the callback should be callback(null)\n\n    },\n    authAttributes: [\n        {name: "appKey", description: "Application key", type: exports.String},\n        {name: "appToken", description: "Application token (if applicable)", type: exports.String},\n        {name: "userToken", description: "User token (if applicable)", type: exports.String}\n    ],\n    applicationName: "Your application name"\n});\n\n```\n\nFinally, add the following code snippet to your app.js file, so that haypeaeye can process all routes beginning with /api/\n\n```\napp.all("/api/*", function(req, res, next) {\n    haypeaeye.handleRequest(req, res, next);\n});\n```\n\n### Defining API Routes\nYou define haypeaeye routes in a similar way as you would Express routes. You can place the route definitions either in the app.js file, or across multiple route files.\n\nHere is an example haypeaeye route definition:\n\n```\nhaypeaeye.addApiMethod(\n    "/api/say/hello", haypeaeye.GET,\n    "Says hello to the specified user",\n    {grouping: "Greetings", auth: haypeaeye.AUTH_NOT_REQUIRED},\n    [\n        {name: "first_name", type: haypeaeye.String, required: true, description: "User\'s first name"},\n    ],\n    function(req, res) {\n        haypeaeye.successResponse(res, {"message": "Hello " + req.query.first_name});\n    }\n);\n```\n\n#### Parameter types\nThe following parameter types are currently supported:\n* haypeaeye.String\n* haypeaeye.Number\n* haypeaeye.Date\n* haypeaeye.File - although see note below about adding a multipart middleware\n* haypeaeye.Enum - restricts input to an array of valid values that you define in the validValues parameter of your field definitions\n\n#### Response utility methods\nHaypeaeye provides some utility methods for returning standard responses from your methods. These are:\n\n* Success - for returning a success response, where jsonContent is the response you are returning\n        ```\n        haypeaeye.successResponse(res, jsonContent);\n        ```\n* Error - for returning an error response (500), where err is the response you are returning (JSON object)\n        ```\n        haypeaeye.successResponse(res, err);\n        ```\n\n* Success or error - makes it easy for you to return an error or success depending directly on a callback\n        ```\n        haypeaeye.successOrErrorResponse(res, err, successData);\n        ```\n\n* Unathourised - for indicating that the user does not have permission to do that\n        ```\n        haypeaeye.unauthorisedResponse(res, message);\n        ```\n        \nNote: you can also provide field level errors in your error response. To do this, ensure your err object is in the following format:\n\n```\nerr = {message: "There was a pretty nasty error", fieldErrors: [field: "first_name", message: "You forgot your name"]}\n```\n\n\n### Accessing API Docs\nhaypeaeye will automatically generate API documentation for you in HTML (and JSON) format. To access the HTML docs go to the following URL on your server:\n\n/api/docs/html\n\n\n### Note on File Uploads\nIf you want to be able to upload files to your server, you\'ll need to include an Express middleware module like \'connect-multiparty\' in your main app.js file, an example is below:\n\n```\nvar multipart = require(\'connect-multiparty\'); // For haypeaeye file uploads\nvar multipartMiddleware = multipart();\n```\n\nYou then need to modify your app.all route for haypeaeye as shown below:\n\n```\napp.all("/api/*", multipartMiddleware function(req, res, next) {\n    haypeaeye.handleRequest(req, res, next);\n});\n```\n\nYou can then access your parameters via req.files.param_name\n\nIt is well worth cleaning up the temp files that are generated from uploads after you\'re done with them. Haypeaeye provides a utility method that does this for you (where req is the ExpressJS request object):\n\n```\nhaypeaeye.removeTempFiles(req);\n```\n\n### Streaming Video\nhaypeaeye now includes a utility method that allows you to return a video stream back as the response. To do this, you need to call the following method:\n\n```\nhaypeaeye.streamVideo(req, res, path, contentType);\n```\n\nWhere path is the full path to your video file and contentType is the content type of your video (defaults to \'video/mp4\')\n\n\n',
28 silly publish   readmeFilename: 'README.md',
28 silly publish   gitHead: 'cf02f02e8da36be65a707c9048e83d371b4e2fb2',
28 silly publish   bugs: { url: 'https://github.com/darylrowland/haypeaeye/issues' },
28 silly publish   homepage: 'https://github.com/darylrowland/haypeaeye',
28 silly publish   _id: 'haypeaeye@0.3.0',
28 silly publish   scripts: {},
28 silly publish   _shasum: '26618e028a0a6d8e5913ee8a6b18638c1c550d7c',
28 silly publish   _from: '.' }
29 verbose request where is /haypeaeye
30 verbose request registry https://registry.npmjs.org/
31 verbose request id 6bdfab39bcdd5c6e
32 verbose url raw /haypeaeye
33 verbose url resolving [ 'https://registry.npmjs.org/', './haypeaeye' ]
34 verbose url resolved https://registry.npmjs.org/haypeaeye
35 verbose request where is https://registry.npmjs.org/haypeaeye
36 info trying registry request attempt 1 at 10:21:47
37 http PUT https://registry.npmjs.org/haypeaeye
38 http 403 https://registry.npmjs.org/haypeaeye
39 verbose headers { date: 'Tue, 14 Oct 2014 09:21:48 GMT',
39 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
39 verbose headers   'content-type': 'application/json',
39 verbose headers   'cache-control': 'max-age=60',
39 verbose headers   'content-length': '8857',
39 verbose headers   'accept-ranges': 'bytes',
39 verbose headers   via: '1.1 varnish',
39 verbose headers   'x-served-by': 'cache-lcy1135-LCY',
39 verbose headers   'x-cache': 'MISS',
39 verbose headers   'x-cache-hits': '0',
39 verbose headers   'x-timer': 'S1413278506.660162,VS0,VE1614',
39 verbose headers   'keep-alive': 'timeout=10, max=50',
39 verbose headers   connection: 'Keep-Alive' }
40 error publish Failed PUT 403
41 error Error: forbidden cannot modify pre-existing version: 0.3.0
41 error old={"name":"haypeaeye","version":"0.3.0","description":"Library for Express that lets you easily create APIs that self document and validate","main":"haypeaeye.js","repository":{"type":"git","url":"git://github.com/darylrowland/haypeaeye.git"},"keywords":["api","express","docs"],"author":{"name":"Daryl Rowland","email":"daryl@cloudyclear.com"},"license":"MIT","dependencies":{"moment":"*"},"gitHead":"cf02f02e8da36be65a707c9048e83d371b4e2fb2","bugs":{"url":"https://github.com/darylrowland/haypeaeye/issues"},"homepage":"https://github.com/darylrowland/haypeaeye","_id":"haypeaeye@0.3.0","scripts":{},"_shasum":"4a66fcb18843134e696964f78f2eb8ff52782dee","_from":".","_npmVersion":"1.4.21","_npmUser":{"name":"darylrowland","email":"daryl@cloudyclear.com"},"maintainers":[{"name":"darylrowland","email":"daryl@cloudyclear.com"}],"dist":{"shasum":"4a66fcb18843134e696964f78f2eb8ff52782dee","tarball":"http://registry.npmjs.org/haypeaeye/-/haypeaeye-0.3.0.tgz"}}
41 error new={"name":"haypeaeye","version":"0.3.0","description":"Library for Express that lets you easily create APIs that self document and validate","main":"haypeaeye.js","repository":{"type":"git","url":"git://github.com/darylrowland/haypeaeye.git"},"keywords":["api","express","docs"],"author":{"name":"Daryl Rowland","email":"daryl@cloudyclear.com"},"license":"MIT","dependencies":{"moment":"*"},"readme":"haypeaeye\u000a=========\u000a\u000aNodeJS Express API Library for creating APIs that self document and validate. The motivation behind haypeaeye was that I hated the idea of writing + commenting an API library in code and then having to write up the API again in a completely different place. This ultimately leads to inconsistencies between your code and your documentation... haypeaeye fixes this.\u000a\u000aNote: this is just the beginnings of the documentation, more will be added soon.\u000a\u000ahaypeaeye works alongside Express, and provides:\u000a* a way to easily define API endpoints WITH documentation\u000a* additional validation of parameters (e.g. of the parameter types you are passing into your API method)\u000a* an auto-generated documentation site with a console to try things out\u000a* a way to hook in to your existing authentication methods (for api methods that need to be protected)\u000a* utility methods for returning success or error statuses + data easily\u000a* NEW utility method for returning a video stream (to be displayed in a HTML5 video tag)\u000a\u000a\u000a### Getting Started\u000aIn your app.js: `var haypeaeye = require('haypeaeye')`\u000a\u000aThen add the following code snippet to set some initial settings:\u000a\u000a```\u000a// Haypeaeye Setup\u000ahaypeaeye.setSettings({\u000a    authenticatorMethod: function(req, callback) {\u000a        // Set this method to return if you want to provide a way of authenticating some API calls\u000a        // The callback should return callback(user)\u000a        // If there is no authorised user, the callback should be callback(null)\u000a\u000a    },\u000a    authAttributes: [\u000a        {name: \"appKey\", description: \"Application key\", type: exports.String},\u000a        {name: \"appToken\", description: \"Application token (if applicable)\", type: exports.String},\u000a        {name: \"userToken\", description: \"User token (if applicable)\", type: exports.String}\u000a    ],\u000a    applicationName: \"Your application name\"\u000a});\u000a\u000a```\u000a\u000aFinally, add the following code snippet to your app.js file, so that haypeaeye can process all routes beginning with /api/\u000a\u000a```\u000aapp.all(\"/api/*\", function(req, res, next) {\u000a    haypeaeye.handleRequest(req, res, next);\u000a});\u000a```\u000a\u000a### Defining API Routes\u000aYou define haypeaeye routes in a similar way as you would Express routes. You can place the route definitions either in the app.js file, or across multiple route files.\u000a\u000aHere is an example haypeaeye route definition:\u000a\u000a```\u000ahaypeaeye.addApiMethod(\u000a    \"/api/say/hello\", haypeaeye.GET,\u000a    \"Says hello to the specified user\",\u000a    {grouping: \"Greetings\", auth: haypeaeye.AUTH_NOT_REQUIRED},\u000a    [\u000a        {name: \"first_name\", type: haypeaeye.String, required: true, description: \"User's first name\"},\u000a    ],\u000a    function(req, res) {\u000a        haypeaeye.successResponse(res, {\"message\": \"Hello \" + req.query.first_name});\u000a    }\u000a);\u000a```\u000a\u000a#### Parameter types\u000aThe following parameter types are currently supported:\u000a* haypeaeye.String\u000a* haypeaeye.Number\u000a* haypeaeye.Date\u000a* haypeaeye.File - although see note below about adding a multipart middleware\u000a* haypeaeye.Enum - restricts input to an array of valid values that you define in the validValues parameter of your field definitions\u000a\u000a#### Response utility methods\u000aHaypeaeye provides some utility methods for returning standard responses from your methods. These are:\u000a\u000a* Success - for returning a success response, where jsonContent is the response you are returning\u000a        ```\u000a        haypeaeye.successResponse(res, jsonContent);\u000a        ```\u000a* Error - for returning an error response (500), where err is the response you are returning (JSON object)\u000a        ```\u000a        haypeaeye.successResponse(res, err);\u000a        ```\u000a\u000a* Success or error - makes it easy for you to return an error or success depending directly on a callback\u000a        ```\u000a        haypeaeye.successOrErrorResponse(res, err, successData);\u000a        ```\u000a\u000a* Unathourised - for indicating that the user does not have permission to do that\u000a        ```\u000a        haypeaeye.unauthorisedResponse(res, message);\u000a        ```\u000a        \u000aNote: you can also provide field level errors in your error response. To do this, ensure your err object is in the following format:\u000a\u000a```\u000aerr = {message: \"There was a pretty nasty error\", fieldErrors: [field: \"first_name\", message: \"You forgot your name\"]}\u000a```\u000a\u000a\u000a### Accessing API Docs\u000ahaypeaeye will automatically generate API documentation for you in HTML (and JSON) format. To access the HTML docs go to the following URL on your server:\u000a\u000a/api/docs/html\u000a\u000a\u000a### Note on File Uploads\u000aIf you want to be able to upload files to your server, you'll need to include an Express middleware module like 'connect-multiparty' in your main app.js file, an example is below:\u000a\u000a```\u000avar multipart = require('connect-multiparty'); // For haypeaeye file uploads\u000avar multipartMiddleware = multipart();\u000a```\u000a\u000aYou then need to modify your app.all route for haypeaeye as shown below:\u000a\u000a```\u000aapp.all(\"/api/*\", multipartMiddleware function(req, res, next) {\u000a    haypeaeye.handleRequest(req, res, next);\u000a});\u000a```\u000a\u000aYou can then access your parameters via req.files.param_name\u000a\u000aIt is well worth cleaning up the temp files that are generated from uploads after you're done with them. Haypeaeye provides a utility method that does this for you (where req is the ExpressJS request object):\u000a\u000a```\u000ahaypeaeye.removeTempFiles(req);\u000a```\u000a\u000a### Streaming Video\u000ahaypeaeye now includes a utility method that allows you to return a video stream back as the response. To do this, you need to call the following method:\u000a\u000a```\u000ahaypeaeye.streamVideo(req, res, path, contentType);\u000a```\u000a\u000aWhere path is the full path to your video file and contentType is the content type of your video (defaults to 'video/mp4')\u000a\u000a\u000a","readmeFilename":"README.md","gitHead":"cf02f02e8da36be65a707c9048e83d371b4e2fb2","bugs":{"url":"https://github.com/darylrowland/haypeaeye/issues"},"homepage":"https://github.com/darylrowland/haypeaeye","_id":"haypeaeye@0.3.0","scripts":{},"_shasum":"26618e028a0a6d8e5913ee8a6b18638c1c550d7c","_from":".","_npmVersion":"1.4.21","_npmUser":{"name":"darylrowland","email":"daryl@cloudyclear.com"},"maintainers":[{"name":"darylrowland","email":"daryl@cloudyclear.com"}],"dist":{"shasum":"26618e028a0a6d8e5913ee8a6b18638c1c550d7c","tarball":"http://registry.npmjs.org/haypeaeye/-/haypeaeye-0.3.0.tgz"}}: haypeaeye
41 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:300:14)
41 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:238:65)
41 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:123:22)
41 error     at Request.EventEmitter.emit (events.js:98:17)
41 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:893:14)
41 error     at Request.EventEmitter.emit (events.js:117:20)
41 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:844:12)
41 error     at IncomingMessage.EventEmitter.emit (events.js:117:20)
41 error     at _stream_readable.js:910:16
41 error     at process._tickCallback (node.js:415:13)
42 error If you need help, you may report this *entire* log,
42 error including the npm and node versions, at:
42 error     <http://github.com/npm/npm/issues>
43 error System Darwin 14.0.0
44 error command "node" "/usr/local/bin/npm" "publish"
45 error cwd /Users/Daryl/Documents/haypeaeye/haypeaeye/haypeaeye
46 error node -v v0.10.13
47 error npm -v 1.4.21
48 verbose exit [ 1, true ]
